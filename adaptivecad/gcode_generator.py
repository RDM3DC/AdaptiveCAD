# adaptivecad/gcode_generator.py
import datetime
from .io.ama_reader import read_ama, AMAFile

def generate_gcode_from_ama_data(ama_file: AMAFile, tool_diameter: float = 6.0) -> str:
    """
    Generates G-code from an AMAFile object.
    This is a placeholder implementation.

    Args:
        ama_file (AMAFile): The parsed AMA file object.
        tool_diameter (float): Diameter of the milling tool.

    Returns:
        str: The generated G-code as a string.
    """
    gcode_lines = []
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if not ama_file or not ama_file.parts:
        gcode_lines.append("; No parts found in AMA file to process.")
        return "\n".join(gcode_lines)

    # For this placeholder, we'll just use the name of the first part.
    part_name = ama_file.parts[0].name if ama_file.parts[0].name else "unnamed_part"

    gcode_lines.extend([
        f"; G-code generated for {part_name}",
        "; Generated by AdaptiveCAD G-code Generator",
        f"; Date: {timestamp}",
        "; ------------------------------------------",
        "G21       ; Set units to mm",
        "G28       ; Home all axes",
        "; ------------------------------------------",
        f"; Simple milling operation for {part_name}",
        f"; Tool diameter: {tool_diameter:.1f}mm"
    ])

    # Placeholder milling path - a simple square
    gcode_lines.extend([
        "G0 Z15.000  ; Move to safe height",
        "G0 X0.000 Y0.000   ; Move to start position",
        "; Begin cutting operation",
        "G1 Z-2.000 F100.0 ; Move to cutting depth",
        "G1 X50.000 F200.0 ; Cut along X",
        "G1 Y50.000        ; Cut along Y",
        "G1 X0.000         ; Cut back along X",
        "G1 Y0.000         ; Cut back along Y",
        "G0 Z15.000  ; Move to safe height"
    ])

    gcode_lines.extend([
        "; ------------------------------------------",
        "; End of program",
        "G28       ; Return to home position",
        f"; Program {part_name} completed"
    ])

    return "\n".join(gcode_lines)

def generate_gcode_from_ama_file(ama_file_path: str, output_gcode_path: str = None, tool_diameter: float = 6.0) -> str:
    """
    Reads an AMA file, generates G-code, and optionally saves it.

    Args:
        ama_file_path (str): Path to the input AMA file.
        output_gcode_path (str, optional): Path to save the generated G-code. 
                                         If None, G-code is not saved to a file.
        tool_diameter (float): Diameter of the milling tool.

    Returns:
        str: The generated G-code, or None if reading AMA fails.
    """
    ama_file_content = read_ama(ama_file_path)
    if not ama_file_content:
        print(f"Error: Could not read AMA file: {ama_file_path}")
        return None

    gcode_program = generate_gcode_from_ama_data(ama_file_content, tool_diameter)

    if output_gcode_path:
        try:
            with open(output_gcode_path, 'w') as f:
                f.write(gcode_program)
            print(f"G-code program saved to {output_gcode_path}")
        except IOError as e:
            print(f"Error saving G-code to {output_gcode_path}: {e}")
            # Still return the gcode_program even if saving fails
    
    return gcode_program

