"""Fix the MainWindow class definition in playground.py."""
import os
import sys

# Add project root to path
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
sys.path.insert(0, project_root)

def patch_playground():
    """Extract classes from MainWindow and define them at module level."""
    playground_path = os.path.join(project_root, 'adaptivecad', 'gui', 'playground.py')
    # Check if file exists at path
    if not os.path.exists(playground_path):
        print(f"File not found at {playground_path}. Project root is {project_root}")
        playground_path = 'd:\\SuperCAD\\AdaptiveCAD\\adaptivecad\\gui\\playground.py'
        print(f"Trying hardcoded path: {playground_path}")
    
    # Backup original file
    backup_path = playground_path + '.bak'
    print(f"Creating backup at {backup_path}...")
    with open(playground_path, 'r', encoding='utf-8') as f:
        original = f.read()
    
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(original)
    
    # Import Feature first
    feature_import = 'from adaptivecad.command_defs import Feature\n'
    
    # Define feature classes at module level
    code = original.replace(
        'if not HAS_GUI:',
        feature_import + '\n# Feature classes defined at module level\n'
        'class HelixFeature(Feature):\n'
        '    def __init__(self, radius, pitch, height, n_points=250):\n'
        '        params = {\n'
        '            "radius": radius,\n'
        '            "pitch": pitch,\n'
        '            "height": height,\n'
        '            "n_points": n_points,\n'
        '        }\n'
        '        super().__init__(params)\n\n'
        '    def _make_shape(self, params):\n'
        '        import numpy as np\n'
        '        from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeEdge\n'
        '        from OCC.Core.TColgp import TColgp_Array1OfPnt\n'
        '        from OCC.Core.gp import gp_Pnt\n'
        '        # Create a helix curve\n'
        '        points = TColgp_Array1OfPnt(1, params["n_points"])\n'
        '        radius = params["radius"]\n'
        '        pitch = params["pitch"]\n'
        '        height = params["height"]\n'
        '        n_points = params["n_points"]\n'
        '        for i in range(1, n_points + 1):\n'
        '            t = (i - 1) / (n_points - 1)\n'
        '            angle = t * height / pitch * 2.0 * np.pi\n'
        '            x = radius * np.cos(angle)\n'
        '            y = radius * np.sin(angle)\n'
        '            z = t * height\n'
        '            points.SetValue(i, gp_Pnt(x, y, z))\n'
        '        # Convert points to an edge\n'
        '        edge_builder = BRepBuilderAPI_MakeEdge(points)\n'
        '        return edge_builder.Edge()\n\n'
        '    def rebuild(self):\n'
        '        self.shape = self._make_shape(self.params)\n\n'
        'class NewHelixCmd:\n'
        '    def __init__(self):\n'
        '        pass\n'
        '    def run(self, mw):\n'
        '        from PySide6.QtWidgets import QDialog, QFormLayout, QDialogButtonBox, QDoubleSpinBox, QSpinBox\n'
        '        class ParamDialog(QDialog):\n'
        '            def __init__(self, parent=None):\n'
        '                super().__init__(parent)\n'
        '                self.setWindowTitle("Helix / Spiral Parameters")\n'
        '                layout = QFormLayout(self)\n'
        '                self.radius = QDoubleSpinBox()\n'
        '                self.radius.setRange(0.1, 1000)\n'
        '                self.radius.setValue(20.0)\n'
        '                self.pitch = QDoubleSpinBox()\n'
        '                self.pitch.setRange(0.1, 1000)\n'
        '                self.pitch.setValue(5.0)\n'
        '                self.height = QDoubleSpinBox()\n'
        '                self.height.setRange(0.1, 1000)\n'
        '                self.height.setValue(40.0)\n'
        '                self.n_points = QSpinBox()\n'
        '                self.n_points.setRange(10, 1000)\n'
        '                self.n_points.setValue(250)\n'
        '                layout.addRow("Radius:", self.radius)\n'
        '                layout.addRow("Pitch:", self.pitch)\n'
        '                layout.addRow("Height:", self.height)\n'
        '                layout.addRow("Resolution:", self.n_points)\n'
        '                buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n'
        '                buttons.accepted.connect(self.accept)\n'
        '                buttons.rejected.connect(self.reject)\n'
        '                layout.addRow(buttons)\n'
        '\n'
        '        dialog = ParamDialog(mw)\n'
        '        if dialog.exec():\n'
        '            radius = dialog.radius.value()\n'
        '            pitch = dialog.pitch.value()\n'
        '            height = dialog.height.value()\n'
        '            n_points = dialog.n_points.value()\n'
        '            feat = HelixFeature(radius, pitch, height, n_points)\n'
        '            mw.add_shape(feat)\n\n'
        'class PiCurveShellFeature(Feature):\n'
        '    def __init__(self, base_radius, height, frequency, amplitude, phase, n_u=20, n_v=20):\n'
        '        params = {\n'
        '            "base_radius": base_radius,\n'
        '            "height": height,\n'
        '            "frequency": frequency,\n'
        '            "amplitude": amplitude,\n'
        '            "phase": phase,\n'
        '            "n_u": n_u,\n'
        '            "n_v": n_v,\n'
        '        }\n'
        '        super().__init__(params)\n\n'
        '    def _make_shape(self, params):\n'
        '        import numpy as np\n'
        '        from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeFace\n'
        '        from OCC.Core.GeomAPI import GeomAPI_PointsToBSplineSurface\n'
        '        from OCC.Core.TColgp import TColgp_Array2OfPnt\n'
        '        from OCC.Core.gp import gp_Pnt\n'
        '\n'
        '        base_radius = params["base_radius"]\n'
        '        height = params["height"]\n'
        '        frequency = params["frequency"]\n'
        '        amplitude = params["amplitude"]\n'
        '        phase = params["phase"]\n'
        '        n_u = params["n_u"]\n'
        '        n_v = params["n_v"]\n'
        '\n'
        '        # Generate parametric surface points\n'
        '        points = TColgp_Array2OfPnt(1, n_u, 1, n_v)\n'
        '        \n'
        '        for i in range(1, n_u + 1):\n'
        '            u_param = (i - 1) / (n_u - 1)  # 0 to 1\n'
        '            height_at_u = u_param * height\n'
        '            \n'
        '            for j in range(1, n_v + 1):\n'
        '                v_param = 2.0 * np.pi * (j - 1) / (n_v - 1)  # 0 to 2π\n'
        '                \n'
        '                # Apply Pi Adaptive calculation to radius\n'
        '                # πₐ(x) formula with phase shift\n'
        '                pi_a_factor = amplitude * np.sin(frequency * v_param + phase) + 1.0\n'
        '                radius_at_point = base_radius * pi_a_factor\n'
        '                \n'
        '                x = radius_at_point * np.cos(v_param)\n'
        '                y = radius_at_point * np.sin(v_param)\n'
        '                z = height_at_u\n'
        '                \n'
        '                points.SetValue(i, j, gp_Pnt(x, y, z))\n'
        '        \n'
        '        # Create B-spline surface\n'
        '        surface_builder = GeomAPI_PointsToBSplineSurface(\n'
        '            points, 3, 8, 3, 8, True, False  # Surface order parameters\n'
        '        )\n'
        '        surface = surface_builder.Surface()\n'
        '        \n'
        '        # Create a face from the surface\n'
        '        face = BRepBuilderAPI_MakeFace(surface, 1e-6).Face()\n'
        '        return face\n\n'
        '    def rebuild(self):\n'
        '        self.shape = self._make_shape(self.params)\n\n'
        'class NewPiCurveShellCmd:\n'
        '    def __init__(self):\n'
        '        pass\n'
        '    def run(self, mw):\n'
        '        from PySide6.QtWidgets import QDialog, QFormLayout, QDialogButtonBox, QDoubleSpinBox, QSpinBox\n'
        '        class ParamDialog(QDialog):\n'
        '            def __init__(self, parent=None):\n'
        '                super().__init__(parent)\n'
        '                self.setWindowTitle("Adaptive Pi Curve Surface")\n'
        '                layout = QFormLayout(self)\n'
        '\n'
        '                self.base_radius = QDoubleSpinBox()\n'
        '                self.base_radius.setRange(0.1, 1000)\n'
        '                self.base_radius.setValue(20.0)\n'
        '                \n'
        '                self.height = QDoubleSpinBox()\n'
        '                self.height.setRange(0.1, 1000)\n'
        '                self.height.setValue(50.0)\n'
        '                \n'
        '                self.frequency = QDoubleSpinBox()\n'
        '                self.frequency.setRange(0.1, 20)\n'
        '                self.frequency.setValue(3.0)\n'
        '                self.frequency.setSingleStep(0.1)\n'
        '                \n'
        '                self.amplitude = QDoubleSpinBox()\n'
        '                self.amplitude.setRange(0.01, 10)\n'
        '                self.amplitude.setValue(0.25)\n'
        '                self.amplitude.setSingleStep(0.05)\n'
        '                \n'
        '                self.phase = QDoubleSpinBox()\n'
        '                self.phase.setRange(0, 2.0 * 3.14159)\n'
        '                self.phase.setValue(0.0)\n'
        '                self.phase.setSingleStep(0.1)\n'
        '                \n'
        '                self.n_u = QSpinBox()\n'
        '                self.n_u.setRange(5, 100)\n'
        '                self.n_u.setValue(20)\n'
        '                \n'
        '                self.n_v = QSpinBox()\n'
        '                self.n_v.setRange(5, 100)\n'
        '                self.n_v.setValue(20)\n'
        '                \n'
        '                layout.addRow("Base Radius:", self.base_radius)\n'
        '                layout.addRow("Height:", self.height)\n'
        '                layout.addRow("Frequency:", self.frequency)\n'
        '                layout.addRow("Amplitude:", self.amplitude)\n'
        '                layout.addRow("Phase:", self.phase)\n'
        '                layout.addRow("U Resolution:", self.n_u)\n'
        '                layout.addRow("V Resolution:", self.n_v)\n'
        '                \n'
        '                buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n'
        '                buttons.accepted.connect(self.accept)\n'
        '                buttons.rejected.connect(self.reject)\n'
        '                layout.addRow(buttons)\n'
        '\n'
        '        dialog = ParamDialog(mw)\n'
        '        if dialog.exec():\n'
        '            base_radius = dialog.base_radius.value()\n'
        '            height = dialog.height.value()\n'
        '            freq = dialog.frequency.value()\n'
        '            amp = dialog.amplitude.value()\n'
        '            phase = dialog.phase.value()\n'
        '            n_u = dialog.n_u.value()\n'
        '            n_v = dialog.n_v.value()\n'
        '            feat = PiCurveShellFeature(base_radius, height, freq, amp, phase, n_u, n_v)\n'
        '            mw.add_shape(feat)\n\n'
        'class SuperellipseFeature(Feature):\n'
        '    def __init__(self, rx, ry, n, segments=100):\n'
        '        params = {\n'
        '            "rx": rx,\n'
        '            "ry": ry,\n'
        '            "n": n,\n'
        '            "segments": segments\n'
        '        }\n'
        '        super().__init__(params)\n'
        '\n'
        '    def _make_shape(self, params):\n'
        '        import numpy as np\n'
        '        from OCC.Core.BRepBuilderAPI import BRepBuilderAPI_MakeWire, BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeFace\n'
        '        from OCC.Core.gp import gp_Pnt, gp_Dir\n'
        '        from OCC.Core.TColgp import TColgp_Array1OfPnt\n'
        '        from OCC.Core.GeomAPI import GeomAPI_PointsToBSplineCurve\n'
        '\n'
        '        rx = params["rx"]\n'
        '        ry = params["ry"]\n'
        '        n = params["n"]\n'
        '        segments = params["segments"]\n'
        '\n'
        '        # Generate superellipse points\n'
        '        points = TColgp_Array1OfPnt(1, segments + 1)\n'
        '        for i in range(1, segments + 2):\n'
        '            t = 2.0 * np.pi * (i - 1) / segments\n'
        '            # Superellipse equation: |cos(t)|^(2/n) * rx * sgn(cos(t)), |sin(t)|^(2/n) * ry * sgn(sin(t))\n'
        '            ct = np.cos(t)\n'
        '            st = np.sin(t)\n'
        '            x = rx * np.sign(ct) * np.abs(ct) ** (2/n)\n'
        '            y = ry * np.sign(st) * np.abs(st) ** (2/n)\n'
        '            points.SetValue(i if i <= segments else 1, gp_Pnt(x, y, 0))\n'
        '\n'
        '        # Create a spline from the points\n'
        '        spline_builder = GeomAPI_PointsToBSplineCurve(points, 3, 8, False, 1.0e-6)\n'
        '        spline = spline_builder.Curve()\n'
        '        \n'
        '        # Create wire from the spline\n'
        '        edge = BRepBuilderAPI_MakeEdge(spline).Edge()\n'
        '        wire = BRepBuilderAPI_MakeWire(edge).Wire()\n'
        '        \n'
        '        # Create a face from the wire\n'
        '        face = BRepBuilderAPI_MakeFace(wire).Face()\n'
        '        return face\n'
        '\n'
        '    def rebuild(self):\n'
        '        self.shape = self._make_shape(self.params)\n\n'
        'class NewSuperellipseCmd:\n'
        '    def __init__(self):\n'
        '        pass\n'
        '    def run(self, mw):\n'
        '        from PySide6.QtWidgets import QDialog, QFormLayout, QDialogButtonBox, QDoubleSpinBox, QSpinBox\n'
        '        class ParamDialog(QDialog):\n'
        '            def __init__(self, parent=None):\n'
        '                super().__init__(parent)\n'
        '                self.setWindowTitle("Superellipse Parameters")\n'
        '                layout = QFormLayout(self)\n'
        '                \n'
        '                self.rx = QDoubleSpinBox()\n'
        '                self.rx.setRange(0.1, 1000)\n'
        '                self.rx.setValue(25.0)\n'
        '                \n'
        '                self.ry = QDoubleSpinBox()\n'
        '                self.ry.setRange(0.1, 1000)\n'
        '                self.ry.setValue(15.0)\n'
        '                \n'
        '                self.n = QDoubleSpinBox()\n'
        '                self.n.setRange(0.01, 10)\n'
        '                self.n.setValue(2.0)\n'
        '                self.n.setSingleStep(0.1)\n'
        '                \n'
        '                self.segments = QSpinBox()\n'
        '                self.segments.setRange(10, 500)\n'
        '                self.segments.setValue(100)\n'
        '                \n'
        '                layout.addRow("X Radius:", self.rx)\n'
        '                layout.addRow("Y Radius:", self.ry)\n'
        '                layout.addRow("Power (n):", self.n)\n'
        '                layout.addRow("Segments:", self.segments)\n'
        '                \n'
        '                buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n'
        '                buttons.accepted.connect(self.accept)\n'
        '                buttons.rejected.connect(self.reject)\n'
        '                layout.addRow(buttons)\n'
        '                \n'
        '        dialog = ParamDialog(mw)\n'
        '        if dialog.exec():\n'
        '            rx = dialog.rx.value()\n'
        '            ry = dialog.ry.value()\n'
        '            n = dialog.n.value()\n'
        '            segments = dialog.segments.value()\n'
        '            feat = SuperellipseFeature(rx, ry, n, segments)\n'
        '            mw.add_shape(feat)\n\n'
        'class TaperedCylinderFeature(Feature):\n'
        '    def __init__(self, height, radius1, radius2):\n'
        '        params = {\n'
        '            "height": height,\n'
        '            "radius1": radius1,\n'
        '            "radius2": radius2\n'
        '        }\n'
        '        super().__init__(params)\n'
        '\n'
        '    def _make_shape(self, params):\n'
        '        from OCC.Core.BRepPrimAPI import BRepPrimAPI_MakeCone\n'
        '        from OCC.Core.gp import gp_Pnt, gp_Ax2, gp_Dir, gp_Vec\n'
        '        \n'
        '        height = params["height"]\n'
        '        radius1 = params["radius1"]\n'
        '        radius2 = params["radius2"]\n'
        '        \n'
        '        ax = gp_Ax2(gp_Pnt(0, 0, 0), gp_Dir(0, 0, 1))\n'
        '        cone = BRepPrimAPI_MakeCone(ax, radius1, radius2, height).Shape()\n'
        '        return cone\n'
        '\n'
        '    def rebuild(self):\n'
        '        self.shape = self._make_shape(self.params)\n\n'
        'class NewTaperedCylinderCmd:\n'
        '    def __init__(self):\n'
        '        pass\n'
        '    def run(self, mw):\n'
        '        from PySide6.QtWidgets import QDialog, QFormLayout, QDialogButtonBox, QDoubleSpinBox\n'
        '        class ParamDialog(QDialog):\n'
        '            def __init__(self, parent=None):\n'
        '                super().__init__(parent)\n'
        '                self.setWindowTitle("Tapered Cylinder Parameters")\n'
        '                layout = QFormLayout(self)\n'
        '                \n'
        '                self.height = QDoubleSpinBox()\n'
        '                self.height.setRange(0.1, 1000)\n'
        '                self.height.setValue(30.0)\n'
        '                \n'
        '                self.radius1 = QDoubleSpinBox()\n'
        '                self.radius1.setRange(0.1, 1000)\n'
        '                self.radius1.setValue(15.0)\n'
        '                \n'
        '                self.radius2 = QDoubleSpinBox()\n'
        '                self.radius2.setRange(0.1, 1000)\n'
        '                self.radius2.setValue(5.0)\n'
        '                \n'
        '                layout.addRow("Height:", self.height)\n'
        '                layout.addRow("Base Radius:", self.radius1)\n'
        '                layout.addRow("Top Radius:", self.radius2)\n'
        '                \n'
        '                buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n'
        '                buttons.accepted.connect(self.accept)\n'
        '                buttons.rejected.connect(self.reject)\n'
        '                layout.addRow(buttons)\n'
        '                \n'
        '        dialog = ParamDialog(mw)\n'
        '        if dialog.exec():\n'
        '            height = dialog.height.value()\n'
        '            radius1 = dialog.radius1.value()\n'
        '            radius2 = dialog.radius2.value()\n'
        '            feat = TaperedCylinderFeature(height, radius1, radius2)\n'
        '            mw.add_shape(feat)\n\n'
        'if not HAS_GUI:'
    )
    
    # Updated MainWindow class structure to fix reference issues
    code = code.replace(
        'def add_shape_action(self, menu, name, icon, cmd_class, is_procedural=False):',
        'def add_shape_action(menu, name, icon, cmd_class, is_procedural=False):'
    )

    # Define an empty MainWindow class if GUI is missing
    code = code.replace(
        'if not HAS_GUI:',
        '# Ensure MainWindow is always defined, but with different implementation based on HAS_GUI\n'
        'if not HAS_GUI:\n'
        '    class MainWindow:\n'
        '        """Placeholder MainWindow implementation when GUI dependencies are not available."""\n'
        '        def __init__(self):\n'
        '            print("GUI dependencies not available. Can\'t create MainWindow.")\n'
        '        \n'
        '        def run(self):\n'
        '            print("Error: Cannot run GUI without PySide6 and OCC.Display dependencies.")\n'
        '            return 1\n'
        'else:'
    )
    
    with open(playground_path, 'w', encoding='utf-8') as f:
        f.write(code)
    
    print(f"Patched {playground_path} successfully!")
    return True

if __name__ == "__main__":
    patch_playground()
    print("Patch completed. Now run the playground using: python -m adaptivecad.gui.playground")
